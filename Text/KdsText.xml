<?xml version="1.0"?>
<doc>
    <assembly>
        <name>KdsText</name>
    </assembly>
    <members>
        <member name="T:Kds.Text.RsId">
            <summary>Identifies localized string constants.</summary> 
        </member>
        <member name="T:Kds.Text.Resources">
            <summary>Enables access to localized resources.</summary> 
        </member>
        <member name="M:Kds.Text.Resources.GetString(Kds.Text.RsId)">
            <summary>Returns localized string constants.</summary>
        </member>
        <member name="T:Kds.Text.StringUtils">
            <summary>Utility class for string processing.</summary> 
        </member>
        <member name="M:Kds.Text.StringUtils.StrLen(System.Char*)">
            <summary>Calculate length of null-terminated string.</summary>
            <remarks>Prerequisiste (unchecked!!!): str != null.</remarks>
        </member>
        <member name="M:Kds.Text.StringUtils.StrHash(System.String,System.Int32)">
            <overloads>String hash function, based on Python's implementation.</overloads>
        </member>
        <member name="M:Kds.Text.StringUtils.StrHash(System.Char[],System.Int32,System.Int32,System.Int32)">
            <remarks>Prerequisiste (unchecked!!!): len >= 0, start + len &lt;= chars.Length.</remarks>
        </member>
        <member name="M:Kds.Text.StringUtils.StrHash(System.Char*,System.Int32,System.Int32)">
            <remarks>Prerequisiste (unchecked!!!): len >= 0, chars at least len characters long.</remarks>
        </member>
        <member name="M:Kds.Text.StringUtils.StrHash(System.Char*,System.Int32)">
            <remarks>Prerequisite (unchecked!!!): chars is null-terminated.</remarks>
        </member>
        <member name="T:Kds.Text.StringTable">
            <summary>String table for mapping unmanaged (interop) strings.</summary>
            <remarks>Accepts .NET strings as well as character arrays and null-terminated
            char* based strings. Can be used for mapping identical external (unmanaged)
            strings to the same .NET string instance.
            This is also called <b>string interning</b>.</remarks>
        </member>
        <member name="M:Kds.Text.StringTable.SetSizeLog(System.Byte)">
            <summary>Sets capacity of string hash table as power of 2.</summary>
            <param name="value">New size of hash table when raised to the power of 2.</param>
        </member>
        <member name="M:Kds.Text.StringTable.IncCount(System.Boolean)">
            <summary>Increments string count, increasing string table capacity as needed.</summary>
        </member>
        <member name="M:Kds.Text.StringTable.DecCount">
            <summary>
            Decrements item count, increments count of deleted slots, rebuilding hash table if needed.
            </summary>
        </member>
        <member name="M:Kds.Text.StringTable.FindSlot(System.Char*,System.Int32,System.Int32@)">
            <summary>Finds slot in string hash table that matches a given key.</summary>
            <remarks>This method always finds a slot. The return value differentiates
            between unused and occupied slots, making it possible to use it for both,
            insertions of new strings, and searches for existing ones.</remarks>
            <param name="key">Pointer to first character of key. 
            Must be != <c>null</c>, which is not checked.</param>
            <param name="len">Length of key. Must be >= 0, which is not checked.</param>
            <param name="indx">Index of matching slot.</param>
            <returns><c>true</c> if slot occupied, <c>false</c> if slot still unused.</returns>
        </member>
        <member name="M:Kds.Text.StringTable.#ctor(System.Byte)">
            <summary>Initializes new <see cref="T:Kds.Text.StringTable"/> instance.</summary>
            <param name="sizeLog">Base 2 logarithm of the initial capacity.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Intern(System.String)">
            <overloads>
            <summary>Interns a string.</summary>
            <remarks>The empty string is always interned.</remarks>
            <returns>Interned string instance, never <c>null</c>.</returns>
            </overloads>
            <param name="value">String to be interned.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>value == null</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Intern(System.Char[])">
            <param name="value">Character array representing string to be interned.
            May be <c>null</c> or empty, which indicates the empty string.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Intern(System.Char[],System.Int32,System.Int32)">
            <param name="value">Character array containing string to be interned.
            May be <c>null</c>, in which case <c>len</c> must be zero.</param>
            <param name="start">Array index of first character of string.</param>
            <param name="len">Length of string. A zero length indicates the empty string.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <c>len &lt; 0</c>, when
            <c>value == null and len &gt; 0</c>, or when <c>start + len &gt; value.Length</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Intern(System.Char*,System.Int32)">
            <remarks>String argument does not have to be null-terminated.</remarks>
            <param name="value">Pointer to first character of string to be interned.
            May be <c>null</c>, in which case <c>len</c> must be zero.</param>
            <param name="len">Length of string. A zero length indicates the empty string.
            Must not reach beyond the end of the string.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <c>len &lt; 0</c>
            or when <c>value == null</c> and <c>len &gt; 0</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Intern(System.Char*)">
            <remarks>String argument must be null-terminated, otherwise an access
            violation could follow.</remarks>
            <param name="value">Pointer to first character of null-terminated string to be
            interned. May be <c>null</c>, which is interpreted as the empty string.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Remove(System.String)">
            <overloads>
            <summary>Removes (un-interns) a string from the string table.</summary>
            <remarks>The empty string cannot be removed.</remarks>
            <returns><c>true</c> if successful, <c>false</c> if no matching string was found,
            or when trying to remove the empty string.</returns>
            </overloads>
            <param name="value">String to be removed.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>value == null</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Remove(System.Char[])">
            <param name="value">Character array representing string to be removed.
            May be <c>null</c> or empty, which indicates the empty string.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Remove(System.Char[],System.Int32,System.Int32)">
            <param name="value">Character array containing string to be removed.
            May be <c>null</c>, in which case <c>len</c> must be zero.</param>
            <param name="start">Array index of first character of string.</param>
            <param name="len">Length of string. A zero length indicates the empty string.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <c>len &lt; 0</c>, when
            <c>value == null and len &gt; 0</c>, or when <c>start + len &gt; value.Length</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Remove(System.Char*,System.Int32)">
            <remarks>String argument does not have to be null-terminated.</remarks>
            <param name="value">Pointer to first character of string to be removed.
            May be <c>null</c>, in which case <c>len</c> must be zero.</param>
            <param name="len">Length of string. A zero length indicates the empty string.
            Must not reach beyond the end of the string.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <c>len &lt; 0</c>
            or when <c>value == null</c> and <c>len &gt; 0</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Remove(System.Char*)">
            <remarks>String argument must be null-terminated, otherwise an access
            violation could follow.</remarks>
            <param name="value">Pointer to first character of null-terminated string to be
            removed. May be <c>null</c>, which is interpreted as the empty string.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Find(System.String)">
            <overloads>
            <summary>Searches for a string in the string table.</summary>
            <remarks>A search for the empty string will always succeed.</remarks>
            <returns>Returns string matching the argument, or <c>null</c> if none found.</returns>
            </overloads>
            <param name="value">String to find.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <c>value == null</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Find(System.Char[])">
            <param name="value">Character array representing string to find.
            May be <c>null</c> or empty, which indicates the empty string.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Find(System.Char[],System.Int32,System.Int32)">
            <param name="value">Character array containing string to find.
            May be <c>null</c>, in which case <c>len</c> must be zero.</param>
            <param name="start">Array index of first character of string.</param>
            <param name="len">Length of string. A zero length indicates the empty string.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <c>len &lt; 0</c>, when
            <c>value == null and len &gt; 0</c>, or when <c>start + len &gt; value.Length</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Find(System.Char*,System.Int32)">
            <remarks>String argument does not have to be null-terminated.</remarks>
            <param name="value">Pointer to first character of string to find.
            May be <c>null</c>, in which case <c>len</c> must be zero.</param>
            <param name="len">Length of string. A zero length indicates the empty string.
            Must not reach beyond the end of the string.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <c>len &lt; 0</c>
            or when <c>value == null</c> and <c>len &gt; 0</c>.</exception>
        </member>
        <member name="M:Kds.Text.StringTable.Find(System.Char*)">
            <remarks>String argument must be null-terminated, otherwise an access
            violation could follow.</remarks>
            <param name="value">Pointer to first character of null-terminated string to be
            find. May be <c>null</c>, which is interpreted as the empty string.</param>
        </member>
        <member name="M:Kds.Text.StringTable.Clear">
            <summary>Clears table of all interned strings.</summary>
        </member>
        <member name="M:Kds.Text.StringTable.Rebuild">
            <summary>Removes deleted entries to reclaim lost performance.</summary>
        </member>
        <member name="M:Kds.Text.StringTable.StartIter">
            <summary>Returns iterator cookie for starting a new iteration.</summary>
        </member>
        <member name="M:Kds.Text.StringTable.Next(System.Int32@)">
            <summary>Retrieves next string and advances iterator.</summary>
            <param name="iter">Iterator cookie representing current iterator state.</param>
            <returns>Interned string if iterator is valid, or <c>null</c> if end has been
            reached.</returns>
        </member>
        <member name="P:Kds.Text.StringTable.Items">
            <summary>Internal array where strings are stored.</summary>
        </member>
        <member name="P:Kds.Text.StringTable.SizeLog">
            <summary>Base 2 logarithm of string table capacity.</summary>
            <remarks>The capacity must be at least twice the number of entries,
            which means: 2^SizeLog >= (2 * Count).</remarks>
        </member>
        <member name="P:Kds.Text.StringTable.Count">
            <summary>Number of entries in string table.</summary>
        </member>
        <member name="P:Kds.Text.StringTable.AutoShrink">
            <summary>
            Allows capacity to shrink automatically when count decreases (to about 25%).
            </summary>
        </member>
    </members>
</doc>
